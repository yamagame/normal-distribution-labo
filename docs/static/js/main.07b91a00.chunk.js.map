{"version":3,"sources":["components/PlotChart.js","components/Statistics.js","components/ChartLabo.js","App.js","serviceWorker.js","index.js"],"names":["Chart","controllers","point","bubble","extend","draw","ease","prototype","call","this","ctx","chart","chartArea","save","getMeta","data","forEach","pt0","fillStyle","_options","backgroundColor","beginPath","moveTo","_view","x","y","radius","lineTo","bottom","closePath","stroke","restore","area","right","fillRect","top","left","element","datasets","options","getContext","type","animation","legend","display","scales","yAxes","id","scaleLabel","labelString","position","ticks","min","ymin","max","ymax","gridLines","drawOnChartArea","xAxes","xmin","xmax","stepSize","xstep","require","round","v","Math","round6","calcParams","array","zeroCheck","c","length","mean","reduce","a","vari","std","sqrt","stderr","color","helpers","chartColors","chartCanvas","React","useRef","samplingPoint","avgSamplingPoint","useState","setLeft","setRight","showDistribution","showSamplingDistribution","showTDistribution","showPaintDistribution","showNormalCumulative","showSamplingCumulative","showTValueCumulative","normalLeftValue","samplingLeftValue","tLeftValue","variance","samplingNumber","showBoth","enableMeanOffset","avgSamplingNumber","stdErr","enableMeanZero","tValue","xValue","showXValue","tValueStdErrOffset","showTValue","state","setStateHook","setState","s","percentFix","setPercentFix","Stat","sampleValues","setSampleValues","percent","setPercent","setNormalPercent","setSamplingPercent","setTValuePercent","chartData","chartOptions","useEffect","current","PlotChart","updateChart","updateParams","params","slice","R","qnorm","qt","dataSet1","i","nx","dnorm","push","calc_normal_distribution","alpha","rgbString","borderColor","yAxisID","pointRadius","fill","samples","map","r","avg","dataSet2","avg_samples","dataSet2_A","areaData","dataSet3","areaData_A","dataSet3_A","dataSet4","calc_sample_distribution","dataSet5","dt","calc_func_t_distribution","tErr","areaData_T","dataSet3_T","point_TC","dataSet_TC","dataSet_TV","dataSet_X","splice","update","className","ref","width","height","checked","onChange","e","target","value","step","parseFloat","parseInt","onClick","rnorm","n","t","j","idx","floor","random","get_random_samples","pnorm","disabled","pt","App","ChartLabo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07b91a00.chunk.js","sourcesContent":["import Chart from 'chart.js';\n\nfunction plotChart(element, datasets, options) {\n  const ctx = element.getContext('2d');\n\n  return new Chart(ctx, {\n    type: 'bar',\n    data: {\n      datasets,\n    },\n    options: {\n      animation: false,\n      legend: { display: false },\n      scales: {\n        yAxes: [{\n          id: 'y-axis-1',\n          scaleLabel: {\n            display: true,\n            labelString: 'f(x)',\n          },\n          position: 'left',\n          ticks: { min: options.ymin, max: options.ymax, },\n          gridLines: {\n            drawOnChartArea: false,\n          }\n        }, {\n          id: 'y-axis-2',\n          scaleLabel: {\n            display: true,\n            labelString: 'count',\n          },\n          position: 'right',\n          ticks: { min: 0, max: 100, },\n          gridLines: {\n            drawOnChartArea: false,\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'x',\n          },\n          type: 'linear',\n          position: 'bottom',\n          ticks: { min: options.xmin, max: options.xmax, stepSize: options.xstep }\n        }]\n      },\n    }\n  });\n}\n\nChart.controllers.point = Chart.controllers.bubble.extend({\n  draw: function (ease) {\n    Chart.controllers.bubble.prototype.draw.call(this, ease);\n    var ctx = this.chart.ctx;\n    var chartArea = this.chart.chartArea;\n    ctx.save();\n    var meta = this.getMeta();\n    meta.data.forEach(data => {\n      var pt0 = data;\n      ctx.fillStyle = pt0._options.backgroundColor;\n      ctx.beginPath();\n      ctx.moveTo(pt0._view.x, pt0._view.y+pt0._view.radius);\n      ctx.lineTo(pt0._view.x, chartArea.bottom);\n      ctx.closePath();\n      ctx.stroke();\n    });\n    ctx.restore();\n  },\n});\n\nChart.controllers.area = Chart.controllers.bubble.extend({\n  draw: function (ease) {\n    var ctx = this.chart.ctx;\n    var chartArea = this.chart.chartArea;\n    ctx.save();\n    var meta = this.getMeta();\n    meta.data.forEach(data => {\n      var pt0 = data;\n      ctx.fillStyle = pt0._options.backgroundColor;\n      if (pt0._view.radius > 0) {\n        if (chartArea.right > pt0._view.x) {\n          ctx.fillRect(pt0._view.x, chartArea.top, chartArea.right - pt0._view.x, pt0._view.y - chartArea.top);\n        }\n      } else {\n        if (0 < pt0._view.x - chartArea.left) {\n          ctx.fillRect(chartArea.left, chartArea.top, pt0._view.x - chartArea.left, pt0._view.y - chartArea.top);\n        }\n      }\n    });\n    ctx.restore();\n  },\n});\n\nexport default {\n  Chart: plotChart,\n}\n","var R = require(\"rlab\");\n\nfunction round(v) {\n  return Math.round(v * 1000) / 1000;\n}\n\nfunction round6(v) {\n  return Math.round(v * 100000) / 100000;\n}\n\n// //正規乱数の生成\n// function rnorm(n, mean, sigma) {\n//   return Math.sqrt(-2 * Math.log(1 - Math.random())) * Math.cos(2 * Math.PI * Math.random());\n// }\n\n// //確率密度関数\n// function dnorm(x, mean, sigma) {\n//   return Math.exp(-(x - mean) * (x - mean) / (2 * sigma)) / Math.sqrt(2 * Math.PI * sigma);\n// }\n\n// //累積分布関数\n// function cdf(x, mean, sigma) {\n//   let v = (1 + erf((x - mean) / Math.sqrt(2 * sigma))) / 2;\n//   return round(v);\n// }\n\n// //誤差関数\n// function erf(x) {\n//   // constants\n//   var p = 0.3275911;\n//   var a1 = 0.254829592;\n//   var a2 = -0.284496736;\n//   var a3 = 1.421413741;\n//   var a4 = -1.453152027;\n//   var a5 = 1.061405429;\n\n//   var t = 1 / (1 + p * Math.abs(x));\n//   var y = 1 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n//   return (x > 0) ? y : -y;\n// }\n\nfunction calcParams(array) {\n  const zeroCheck = (c) => {\n    if (array.length <= 0) return 0;\n    return c;\n  }\n  const mean = zeroCheck(array.reduce((a, c) => a + c, 0) / array.length);\n  //不偏分散\n  const vari = zeroCheck(array.reduce((a, c) => a + (c - mean) * (c - mean), 0) / (array.length - 1));\n  //標準偏差\n  const std = zeroCheck(Math.sqrt(vari));\n  //標準誤差\n  const stderr = zeroCheck(Math.sqrt(vari / array.length));\n  return {\n    mean,\n    vari,\n    std,\n    stderr,\n  }\n}\n\nexport default {\n  round,\n  round6,\n  // rnorm,\n  // dnorm,\n  // cdf,\n  // erf,\n  calcParams,\n}\n","import React from 'react';\nimport Chart from 'chart.js';\nimport PlotChart from './PlotChart';\nimport Stat from './Statistics';\nimport R from 'rlab';\n\nconst color = Chart.helpers.color;\nconst chartColors = {\n  red: 'rgb(255, 99, 132)',\n  orange: 'rgb(255, 159, 64)',\n  yellow: 'rgb(255, 205, 86)',\n  green: 'rgb(75, 192, 192)',\n  blue: 'rgb(54, 162, 235)',\n  purple: 'rgb(153, 102, 255)',\n  grey: 'rgb(201, 203, 207)'\n};\n\nexport default function () {\n  const chartCanvas = React.useRef(null);\n  const chart = React.useRef(null);\n  const samplingPoint = React.useRef([]);\n  const avgSamplingPoint = React.useRef([]);\n  const [left, setLeft] = React.useState(35);\n  const [right, setRight] = React.useState(45);\n\n  const [state, setStateHook] = React.useState({\n    showDistribution: false,\n    showSamplingDistribution: false,\n    showTDistribution: false,\n    showPaintDistribution: false,\n    showNormalCumulative: false,\n    showSamplingCumulative: false,\n    showTValueCumulative: false,\n    normalLeftValue: left,\n    samplingLeftValue: left,\n    tLeftValue: -10,\n    mean: (right + left) / 2,\n    variance: 1,\n    std: 1,\n    samplingNumber: 3,\n    showBoth: false,\n    enableMeanOffset: false,\n    avgSamplingNumber: 0,\n    stdErr: 1 / Math.sqrt(3),\n    enableMeanZero: false,\n    tValue: 0,\n    xValue: 0,\n    showXValue: false,\n    tValueStdErrOffset: false,\n    showTValue: false,\n  })\n\n  const setState = (s) => {\n    setStateHook(s);\n  }\n\n  const [percentFix, setPercentFix] = React.useState(false);\n  const [sampleValues, setSampleValues] = React.useState(Stat.calcParams([0]));\n  const [percent, setPercent] = React.useState(0);\n  const [normalPercent, setNormalPercent] = React.useState(0);\n  const [samplingPercent, setSamplingPercent] = React.useState(0);\n  const [tValuePercent, setTValuePercent] = React.useState(0);\n  const chartData = React.useRef([]);\n  const chartOptions = React.useRef({\n    xmin: left,\n    xmax: right,\n    xstep: 1,\n    ymin: 0,\n    ymax: 1,\n  });\n\n  React.useEffect(() => {\n    chart.current = PlotChart.Chart(\n      chartCanvas.current,\n      chartData.current,\n      chartOptions.current,\n    );\n    updateChart();\n  }, []);\n\n  const updateParams = () => {\n    var params = Stat.calcParams(samplingPoint.current.slice(0, state.samplingNumber));\n    const tValue = params.stderr>0?(params.mean - state.mean) / params.stderr:0;\n    params.tValue = tValue;\n    setSampleValues(params);\n    return params;\n  }\n\n  React.useEffect(() => {\n    var params = Stat.calcParams(samplingPoint.current.slice(0, state.samplingNumber));\n    const tValue = params.stderr>0?(params.mean - state.mean) / params.stderr:0;\n    if (percentFix) {\n      const s = {\n        ...state,\n        normalLeftValue: R.qnorm(percent, state.mean, state.std),\n        samplingLeftValue: R.qnorm(percent, state.mean, state.stdErr),\n        tLeftValue: R.qt(percent, state.samplingNumber - 1),\n        tValue,\n        stdErr: state.std / Math.sqrt(state.samplingNumber),\n      }\n      setState(s)\n    } else {\n      setState({\n        ...state,\n        stdErr: state.std / Math.sqrt(state.samplingNumber),\n        tValue,\n      });\n    }\n    updateParams();\n  }, [\n    percentFix, \n    state.mean,\n    state.std,\n    state.stdErr,\n    state.samplingNumber,\n    percent,\n  ]);\n\n  React.useEffect(() => {\n    setState({\n      ...state,\n      std: Math.sqrt(state.variance),\n    });\n  }, [state.variance]);\n\n  React.useEffect(() => {\n    setState({\n      ...state,\n      mean: left + (right - left) / 2,\n      normalLeftValue: left,\n      samplingLeftValue: left,\n    })\n    chartOptions.current.xmin = left;\n    chartOptions.current.xmax = right;\n    chart.current = PlotChart.Chart(\n      chartCanvas.current,\n      chartData.current,\n      chartOptions.current,\n    );\n    updateChart();\n  }, [left, right]);\n\n  React.useEffect(() => {\n    updateChart();\n  }, [\n    state,\n  ]);\n\n  const get_random_samples = (n) => {\n    function getRandomInt(max) {\n      return Math.floor(Math.random() * Math.floor(max));\n    }\n    avgSamplingPoint.current = [];\n    for (var i=0;i<n;i++) {\n      const t = [];\n      for (var j=0;j<state.samplingNumber;j++) {\n        const idx = getRandomInt(200);\n        t.push(samplingPoint.current[idx]);\n      }\n      avgSamplingPoint.current.push({\n        x: t.reduce( (a,c) => a+c, 0)/t.length,\n        y: 70, r: 4,\n      })\n    }\n  }\n\n  const doSampling = () => {\n    samplingPoint.current = [];\n    R.rnorm(200, state.mean, state.std).forEach( v => {\n      samplingPoint.current.push(v);\n    });\n    get_random_samples(200);\n    const params = updateParams();\n    setState({\n      ...state,\n      tValue: params.tValue,\n    });\n    updateChart();\n  }\n\n  const doResetSampling = () => {\n    samplingPoint.current = [];\n    const params = updateParams();\n    setState({\n      ...state,\n      avgSamplingNumber: 0,\n      tValue: params.tValue,\n    });\n    updateChart();\n  }\n\n  const updateChart = () => {\n    var xmin = chartOptions.current.xmin;\n    var xmax = chartOptions.current.xmax;\n    var nx = 100;\n\n    function calc_normal_distribution() {\n      var data = [];\n      for (let i = 0; i < nx + 1; i++) {\n        var x = (xmin + (xmax - xmin) / nx * i);\n        var y = R.dnorm(x, state.mean, state.std);\n        data.push({ x: x, y: y });\n      }\n      return data;\n    }\n\n    var dataSet1 = {\n      type: 'line',\n      data: calc_normal_distribution(),\n      backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),\n      borderColor: chartColors.red,\n      yAxisID: 'y-axis-1',\n      pointRadius: 0,\n      fill: state.showPaintDistribution,\n    }\n\n    const get_samples = () => {\n      const t = samplingPoint.current.slice(0, state.samplingNumber).map(v => {\n        return {\n          x: v, y: 20,\n          r: 4,\n        }\n      });\n      return t;\n    }\n\n    var samples = get_samples();\n    var avg = samples.reduce((a, c) => a + c.x, 0) / samples.length;\n    var params = Stat.calcParams(samplingPoint.current.slice(0, state.samplingNumber));\n\n    var alpha = 0.6 / state.samplingNumber;\n    if (alpha < 0.05) alpha = 0.05;\n\n    var dataSet2 = {\n      type: 'point',\n      data: state.avgSamplingNumber==0?samples:[],\n      backgroundColor: color('blue').alpha(alpha * 2).rgbString(),\n      borderColor: color('blue').alpha(alpha * 5).rgbString(),\n      yAxisID: 'y-axis-2',\n    }\n\n    const avg_samples = [\n      { x: avg, y: 70, r: 4, },\n      ...avgSamplingPoint.current.slice(0, state.avgSamplingNumber),\n    ];\n\n    var alpha = 0.6 / avg_samples.length;\n    if (alpha < 0.05) alpha = 0.05;\n\n    var dataSet2_A = {\n      type: 'point',\n      data: avg_samples,\n      backgroundColor: color(chartColors.green).alpha(alpha * 2).rgbString(),\n      borderColor: color(chartColors.green).alpha(alpha * 5).rgbString(),\n      yAxisID: 'y-axis-2',\n    }\n\n    var areaData = [\n      { x: state.normalLeftValue, y: 0, r: 0 },\n    ];\n\n    if (state.showBoth) {\n      areaData.push({ x: state.mean*2-state.normalLeftValue, y: 0, r: 100 });\n    }\n\n    var dataSet3 = {\n      type: 'area',\n      data: areaData,\n      backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),\n      borderColor: chartColors.red,\n      pointRadius: 0,\n    }\n\n    var areaData_A = [\n      { x: state.samplingLeftValue+(state.enableMeanOffset?params.mean-state.mean:0), y: 0, r: 0 },\n    ];\n\n    if (state.showBoth) {\n      areaData_A.push({ x: (state.enableMeanOffset?params.mean:state.mean)*2-(state.samplingLeftValue+(state.enableMeanOffset?params.mean-state.mean:0)), y: 0, r: 100 });\n    }\n\n    var dataSet3_A = {\n      type: 'area',\n      data: areaData_A,\n      backgroundColor: color(chartColors.green).alpha(0.5).rgbString(),\n      borderColor: chartColors.green,\n      pointRadius: 0,\n    }\n\n    function calc_sample_distribution() {\n      var data = [];\n      for (let i = 0; i < nx + 1; i++) {\n        var x = (xmin + (xmax - xmin) / nx * i);\n        var y = R.dnorm(x, (state.enableMeanOffset?params.mean-state.mean:0)+state.mean, state.stdErr);\n        data.push({ x: x, y: y });\n      }\n      return data;\n    }\n\n    var dataSet4 = {\n      type: 'line',\n      data: calc_sample_distribution(),\n      backgroundColor: color(chartColors.green).alpha(0.5).rgbString(),\n      borderColor: chartColors.green,\n      yAxisID: 'y-axis-1',\n      pointRadius: 0,\n      fill: state.showPaintDistribution,\n    }\n\n    function calc_func_t_distribution() {\n      var data = [];\n      for (let i = 0; i < nx + 1; i++) {\n        var x = (xmin + (xmax - xmin) / nx * i)-state.mean;\n        var y = R.dt(x, state.samplingNumber - 1);\n        data.push({ x: x+(state.enableMeanOffset?params.mean-state.mean:0)+state.mean, y: y });\n      }\n      return data;\n    }\n\n    var dataSet5 = {\n      type: 'line',\n      data: calc_func_t_distribution(),\n      backgroundColor: color(chartColors.orange).alpha(0.5).rgbString(),\n      borderColor: chartColors.orange,\n      yAxisID: 'y-axis-1',\n      pointRadius: 0,\n      fill: state.showPaintDistribution,\n    }\n\n    var tErr = state.tValueStdErrOffset?(params.stderr==0?1:params.stderr):1;\n\n    var areaData_T = [\n      { x: state.tLeftValue*tErr+state.mean+(state.enableMeanOffset?params.mean-state.mean:0), y: 0, r: 0 },\n    ];\n\n    if (state.showBoth) {\n      areaData_T.push({ x: -state.tLeftValue*tErr+state.mean+(state.enableMeanOffset?params.mean-state.mean:0), y: 0, r: 100 })\n    }\n\n    var dataSet3_T = {\n      type: 'area',\n      data: areaData_T,\n      backgroundColor: color(chartColors.orange).alpha(0.5).rgbString(),\n      borderColor: chartColors.orange,\n      pointRadius: 0,\n    }\n\n    var tErr = params.stderr==0?1:params.stderr;\n\n    var point_TC = [\n      { x: state.tLeftValue*tErr+state.mean+(state.enableMeanOffset?params.mean-state.mean:0), y: 100, r: 4, },\n    ]\n\n    if (state.showBoth) {\n      point_TC.push({ x: -state.tLeftValue*tErr+state.mean+(state.enableMeanOffset?params.mean-state.mean:0), y: 100, r: 4, });\n    }\n\n    var dataSet_TC = {\n      type: 'point',\n      data: point_TC,\n      backgroundColor: color('orange').alpha(alpha * 2).rgbString(),\n      borderColor: color('orange').alpha(alpha * 5).rgbString(),\n      yAxisID: 'y-axis-2',\n    }\n\n    var dataSet_TV = {\n      type: 'point',\n      data: [{ x: state.tValue, y: 50, r: 4, }],\n      backgroundColor: color('orange').alpha(alpha * 2).rgbString(),\n      borderColor: color('orange').alpha(alpha * 5).rgbString(),\n      yAxisID: 'y-axis-2',\n    }\n\n    var dataSet_X = {\n      type: 'point',\n      data: [{ x: state.xValue*(right-left)/2+(right+left)/2, y: 70, r: 4, },],\n      backgroundColor: color('black').alpha(alpha * 2).rgbString(),\n      borderColor: color('black').alpha(alpha * 5).rgbString(),\n      yAxisID: 'y-axis-2',\n    }\n\n    chartData.current.splice(0);\n\n    chartData.current.push(dataSet2_A);\n    chartData.current.push(dataSet2);\n    if (state.showDistribution) {\n      chartData.current.push(dataSet1);\n    }\n    if (state.showSamplingDistribution) {\n      chartData.current.push(dataSet4);\n    }\n    if (state.showTDistribution) {\n      chartData.current.push(dataSet5);\n    }\n    if (state.showNormalCumulative) {\n      chartData.current.push(dataSet3);\n    }\n    if (state.showSamplingCumulative) {\n      chartData.current.push(dataSet3_A);\n    }\n    if (state.showTValueCumulative) {\n      chartData.current.push(dataSet3_T);\n      chartData.current.push(dataSet_TC);\n    }\n    if (state.showTValue) {\n      chartData.current.push(dataSet_TV);\n    }\n    if (state.showXValue) {\n      chartData.current.push(dataSet_X);\n    }\n\n    chart.current.update();\n  }\n\n  return (\n    <div className=\"container mx-auto\">\n      <canvas className=\"mt-4\" ref={chartCanvas} width=\"400\" height=\"200\"></canvas>\n      <div className=\"pl-16\">\n        <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showDistribution}\n            onChange={(e) => {\n              setState({ ...state, showDistribution: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:母集団分布</div>\n        </div>\n        <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showSamplingDistribution}\n            onChange={(e) => {\n              setState({ ...state, showSamplingDistribution: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:標本平均の分布</div>\n        </div>\n        <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showTDistribution}\n            onChange={(e) => {\n              setState({ ...state, showTDistribution: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:t分布</div>\n        </div>\n        <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showPaintDistribution}\n            onChange={(e) => {\n              setState({ ...state, showPaintDistribution: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:塗り潰し</div>\n        </div>\n        <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.enableMeanOffset}\n            onChange={(e) => {\n              setState({ ...state, enableMeanOffset: e.target.checked })\n            }}\n          />\n          <div className=\"inline-block\">:標本平均へ移動</div>\n        </div>\n        <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.enableMeanZero}\n            onChange={(e) => {\n              if (e.target.checked) {\n                setLeft(-5);\n                setRight(5);\n              } else {\n                setLeft(35);\n                setRight(45);\n              }\n              setState({\n                ...state,\n                enableMeanZero: e.target.checked,\n              })\n            }}\n          />\n          <div className=\"inline-block\">:0基準</div>\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">母平均:<div className=\"inline-block ml-2 text-red-700\">{state.mean}</div></div>\n          <input\n            className=\"w-48\"\n            value={state.mean}\n            type=\"range\"\n            min={chartOptions.current.xmin}\n            max={chartOptions.current.xmax}\n            step=\"0.1\"\n            onChange={(e) => {\n              setState({\n                ...state,\n                mean: parseFloat(e.target.value),\n              })\n            }}\n          />\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">母分散:<div className=\"inline-block ml-2 text-red-700\">{state.variance}</div></div>\n          <input\n            className=\"w-48\"\n            value={state.variance}\n            type=\"range\"\n            min=\"0.1\"\n            max=\"3\"\n            step=\"0.1\"\n            onChange={(e) => {\n              setState({\n                ...state,\n                variance: parseFloat(e.target.value),\n              })\n            }}\n          />\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">サンプリング数:<div className=\"inline-block ml-2 text-red-700\">{state.samplingNumber}</div></div>\n          <input\n            className=\"w-48\"\n            value={state.samplingNumber} type=\"range\" min=\"3\" max=\"200\" step=\"1\"\n            onChange={(e) => {\n              setState({\n                ...state,\n                samplingNumber: parseInt(e.target.value),\n              })\n            }}\n          />\n          <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"サンプリング\" onClick={doSampling} />\n          <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"リセット\" onClick={doResetSampling} />\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">標本平均の個数:<div className=\"inline-block ml-2 text-red-700\">{state.avgSamplingNumber+1}</div></div>\n          <input\n            className=\"w-48\"\n            value={state.avgSamplingNumber} type=\"range\" min=\"0\" max=\"99\" step=\"1\"\n            onChange={(e) => {\n              setState({\n                ...state,\n                avgSamplingNumber: parseInt(e.target.value),\n              })\n            }}\n          />\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">標本平均:<div className=\"inline-block ml-2 text-red-700\">{Stat.round(sampleValues.mean)}</div></div>\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">標準偏差:<div className=\"inline-block ml-2 text-red-700\">{Stat.round(sampleValues.std)}</div></div>\n        </div>\n        <div>\n          <div className=\"inline-block w-1/3\">標準誤差:<div className=\"inline-block ml-2 text-red-700\">{Stat.round6(sampleValues.stderr)}</div></div>\n        </div>\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={state.showTValue}\n            onChange={(e) => {\n              setState({\n                ...state,\n                showTValue: e.target.checked,\n              })\n            }}\n          />\n          <div className=\"inline-block w-1/3\">t値:<div className=\"inline-block ml-2 text-red-700\">{Stat.round(state.tValue)}</div></div>\n        </div>\n\n        <div>累積分布</div>\n\n        <div>\n          <div className=\"inline-block w-1/3\">\n            <input\n              type=\"checkbox\"\n              checked={state.showBoth}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  showBoth: e.target.checked,\n                })\n              }}\n            />\n            <div className=\"inline-block\">:両側表示</div>\n          </div>\n        </div>\n\n        <div>\n          <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showNormalCumulative}\n            onChange={(e) => {\n              setState({ ...state, showNormalCumulative: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:母分布:</div><div className=\"inline-block ml-2 text-red-700\">{Stat.round(state.normalLeftValue)}/{Stat.round(R.pnorm(state.normalLeftValue, state.mean, state.std)*100)}%</div>\n          </div>\n          <div className=\"inline-block\">\n            <input\n              className=\"w-48\"\n              value={state.normalLeftValue}\n              type=\"range\"\n              min={chartOptions.current.xmin}\n              max={chartOptions.current.xmax}\n              step=\"0.05\"\n              disabled={percentFix}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  normalLeftValue: parseFloat(e.target.value),\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showSamplingCumulative}\n            onChange={(e) => {\n              setState({ ...state, showSamplingCumulative: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:標本分布:</div><div className=\"inline-block ml-2 text-red-700\">{Stat.round(state.samplingLeftValue)}/{Stat.round(R.pnorm(state.samplingLeftValue, state.mean, state.stdErr)*100)}%</div>\n          </div>\n          <div className=\"inline-block\">\n            <input\n              className=\"w-48\"\n              value={state.samplingLeftValue}\n              type=\"range\"\n              min={chartOptions.current.xmin}\n              max={chartOptions.current.xmax}\n              step=\"0.05\"\n              disabled={percentFix}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  samplingLeftValue: parseFloat(e.target.value),\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showTValueCumulative}\n            onChange={(e) => {\n              setState({ ...state, showTValueCumulative: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:t分布:</div><div className=\"inline-block ml-2 text-red-700\">{Stat.round(state.tLeftValue)}/{Stat.round(R.pt(state.tLeftValue, state.samplingNumber-1)*100)}%</div>\n          </div>\n          <div className=\"inline-block\">\n            <input\n              className=\"w-48\"\n              value={state.tLeftValue}\n              type=\"range\"\n              min={-10}\n              max={ 10}\n              step=\"0.05\"\n              disabled={percentFix}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  tLeftValue: parseFloat(e.target.value),\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"inline-block w-1/3\">\n            <input\n              type=\"checkbox\"\n              checked={percentFix}\n              onChange={(e) => {\n                if (e.target.checked) {\n                  setNormalPercent(Stat.round(R.pnorm(state.normalLeftValue, state.mean, state.std)));\n                  setSamplingPercent(Stat.round(R.pnorm(state.samplingLeftValue, state.mean, state.stdErr)));\n                  setTValuePercent(Stat.round(R.pt(state.tLeftValue, state.samplingNumber-1)));\n                }\n                setPercentFix(e.target.checked)\n              }}\n            />\n            <div className=\"inline-block\">:パーセント固定</div>\n          </div>\n          <div className=\"inline-block\">\n            <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"0.5%点\" onClick={() => {\n              setPercent(0.005);\n              setState({\n                ...state,\n                normalLeftValue: R.qnorm(0.005, state.mean, state.std),\n                samplingLeftValue: R.qnorm(0.005, state.mean, state.stdErr),\n                tLeftValue: R.qt(0.005, state.samplingNumber - 1),\n              })\n            }} />\n            <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"1.0%点\" onClick={() => {\n              setPercent(0.01);\n              setState({\n                ...state,\n                normalLeftValue: R.qnorm(0.01, state.mean, state.std),\n                samplingLeftValue: R.qnorm(0.01, state.mean, state.stdErr),\n                tLeftValue: R.qt(0.01, state.samplingNumber - 1),\n              })\n            }} />\n            <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"2.5%点\" onClick={() => {\n              setPercent(0.025);\n              setState({\n                ...state,\n                normalLeftValue: R.qnorm(0.025, state.mean, state.std),\n                samplingLeftValue: R.qnorm(0.025, state.mean, state.stdErr),\n                tLeftValue: R.qt(0.025, state.samplingNumber - 1),\n              })\n            }} />\n            <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"5%点\" onClick={() => {\n              setPercent(0.05);\n              setState({\n                ...state,\n                normalLeftValue: R.qnorm(0.05, state.mean, state.std),\n                samplingLeftValue: R.qnorm(0.05, state.mean, state.stdErr),\n                tLeftValue: R.qt(0.05, state.samplingNumber - 1),\n              })\n            }} />\n            <input className=\"mr-1 bg-green-200\" type=\"button\" value=\"25%点\" onClick={() => {\n              setPercent(0.25);\n              setState({\n                ...state,\n                normalLeftValue: R.qnorm(0.25, state.mean, state.std),\n                samplingLeftValue: R.qnorm(0.25, state.mean, state.stdErr),\n                tLeftValue: R.qt(0.25, state.samplingNumber - 1),\n              })\n            }} />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"inline-block w-1/3\">\n          <input\n            type=\"checkbox\"\n            checked={state.showXValue}\n            onChange={(e) => {\n              setState({ ...state, showXValue: e.target.checked });\n            }}\n          />\n          <div className=\"inline-block\">:X値:</div><div className=\"inline-block ml-2 text-red-700\">{Stat.round(state.xValue*(right-left)/2+(right+left)/2)}</div>\n          </div>\n          <div className=\"inline-block\">\n            <input\n              className=\"w-48\"\n              value={state.xValue}\n              type=\"range\"\n              min={-1}\n              max={ 1}\n              step=\"0.001\"\n              disabled={percentFix}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  xValue: parseFloat(e.target.value),\n                })\n              }}\n            />\n          </div>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport ChartLabo from './components/ChartLabo';\n\nfunction App() {\n  return (\n    <ChartLabo />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}